/**
 * Áµ±‰∏Ä„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£
 * what/why/howÂΩ¢Âºè„Åß„ÅÆ„Ç®„É©„ÉºÊÉÖÂ†±„ÅÆÊßãÈÄ†Âåñ
 */

export class ErrorHandler {
  /**
     * „Ç®„É©„ÉºÊÉÖÂ†±„ÅÆÊßãÈÄ†Âåñ
     * @param {Object} params - „Ç®„É©„Éº„Éë„É©„É°„Éº„Çø
     * @param {string} params.what - ‰Ωï„ÅåËµ∑„Åç„Åü„Åã
     * @param {string} params.why - „Å™„ÅúËµ∑„Åç„Åü„Åã
     * @param {string} params.how - „Å©„ÅÜ„Åô„Çå„Å∞ËâØ„ÅÑ„Åã
     * @param {Error} [params.originalError] - ÂÖÉ„ÅÆ„Ç®„É©„Éº„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà
     * @param {Object} [params.context] - ËøΩÂä†„ÅÆ„Ç≥„É≥„ÉÜ„Ç≠„Çπ„ÉàÊÉÖÂ†±
     * @returns {Error} ÊßãÈÄ†Âåñ„Åï„Çå„Åü„Ç®„É©„Éº
     */
  static createError({ what, why, how, originalError, context = {} }) {
    const error = new Error(what);
    error.details = {
      what,
      why,
      how,
      timestamp: new Date().toISOString(),
      context
    };

    if (originalError) {
      error.originalError = originalError;
      error.stack = originalError.stack || error.stack;
    }

    return error;
  }

  /**
     * „Ç®„É©„Éº„ÅÆ„É≠„Ç∞Âá∫Âäõ
     * @param {Error} error - „Ç®„É©„Éº„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà
     * @param {string} [level='error'] - „É≠„Ç∞„É¨„Éô„É´
     */
  static logError(error, level = 'error') {
    const details = error.details || {};
    const logData = {
      message: error.message,
      ...details,
      stack: error.stack
    };

    console[level]('üö® Error Details:', logData);

    // ÈñãÁô∫Áí∞Â¢É„Åß„ÅØË©≥Á¥∞„ÇíË°®Á§∫
    if (process.env.NODE_ENV === 'development') {
      console.group('Error Context');
      console.log('What:', details.what || error.message);
      console.log('Why:', details.why || 'Unknown reason');
      console.log('How:', details.how || 'No recovery suggestion');
      console.log('Context:', details.context || {});
      console.groupEnd();
    }
  }

  /**
     * ÈùûÂêåÊúü„Ç®„É©„Éº„Éè„É≥„Éâ„É©„Éº„É©„ÉÉ„Éë„Éº
     * @param {Function} asyncFn - ÈùûÂêåÊúüÈñ¢Êï∞
     * @param {Object} errorInfo - „Ç®„É©„ÉºÊÉÖÂ†±„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„Éà
     * @returns {Function} „É©„ÉÉ„Éó„Åï„Çå„ÅüÈñ¢Êï∞
     */
  static wrapAsync(asyncFn, errorInfo = {}) {
    return async (...args) => {
      try {
        return await asyncFn(...args);
      } catch (error) {
        const structuredError = ErrorHandler.createError({
          what: errorInfo.what || `Error in ${asyncFn.name || 'async function'}`,
          why: errorInfo.why || error.message,
          how: errorInfo.how || 'Check the error details and retry',
          originalError: error,
          context: { args }
        });

        ErrorHandler.logError(structuredError);
        throw structuredError;
      }
    };
  }

  /**
     * Promise„ÉÅ„Çß„Éº„É≥„ÅÆ„Ç®„É©„Éº„Éè„É≥„Éâ„É©„Éº
     * @param {Object} errorInfo - „Ç®„É©„ÉºÊÉÖÂ†±„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„Éà
     * @returns {Function} „Ç®„É©„Éº„Éè„É≥„Éâ„É©„ÉºÈñ¢Êï∞
     */
  static handleCatch(errorInfo = {}) {
    return (error) => {
      const structuredError = ErrorHandler.createError({
        what: errorInfo.what || 'Operation failed',
        why: errorInfo.why || error.message,
        how: errorInfo.how || 'Please try again',
        originalError: error
      });

      ErrorHandler.logError(structuredError);
      throw structuredError;
    };
  }

  /**
     * „É™„Éà„É©„Ç§ÂèØËÉΩ„Å™„Ç®„É©„Éº„Åã„Å©„ÅÜ„Åã„ÅÆÂà§ÂÆö
     * @param {Error} error - „Ç®„É©„Éº„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà
     * @returns {boolean} „É™„Éà„É©„Ç§ÂèØËÉΩ„Åã„Å©„ÅÜ„Åã
     */
  static isRetryable(error) {
    const retryableErrors = [
      'ECONNRESET',
      'ETIMEDOUT',
      'ENOTFOUND',
      'NetworkError',
      'TimeoutError'
    ];

    return retryableErrors.some(type =>
      error.message.includes(type) ||
            error.code === type
    );
  }

  /**
     * „É¶„Éº„Ç∂„ÉºÂêë„Åë„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÁîüÊàê
     * @param {Error} error - „Ç®„É©„Éº„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà
     * @returns {string} „É¶„Éº„Ç∂„ÉºÂêë„Åë„É°„ÉÉ„Çª„Éº„Ç∏
     */
  static getUserMessage(error) {
    if (error.details && error.details.how) {
      return error.details.how;
    }

    // „Éá„Éï„Ç©„É´„Éà„É°„ÉÉ„Çª„Éº„Ç∏
    const defaultMessages = {
      NetworkError: '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
      TimeoutError: 'Âá¶ÁêÜ„Åå„Çø„Ç§„É†„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü„ÄÇ„Åó„Å∞„Çâ„ÅèÂæÖ„Å£„Å¶„Åã„ÇâÂÜçË©¶Ë°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
      ValidationError: 'ÂÖ•ÂäõÂÜÖÂÆπ„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
      AuthorizationError: '„Ç¢„ÇØ„Çª„ÇπÊ®©Èôê„Åå„ÅÇ„Çä„Åæ„Åõ„Çì'
    };

    for (const [type, message] of Object.entries(defaultMessages)) {
      if (error.message.includes(type)) {
        return message;
      }
    }

    return '‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„Åó„Å∞„Çâ„ÅèÂæÖ„Å£„Å¶„Åã„ÇâÂÜçË©¶Ë°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ';
  }
}

// „Ç∞„É≠„Éº„Éê„É´„Ç®„É©„Éº„Éè„É≥„Éâ„É©„Éº„ÅÆË®≠ÂÆö
if (typeof window !== 'undefined') {
  window.addEventListener('unhandledrejection', (event) => {
    const error = ErrorHandler.createError({
      what: 'Unhandled Promise Rejection',
      why: event.reason?.message || 'Unknown rejection reason',
      how: 'Check async error handling in the application',
      originalError: event.reason
    });

    ErrorHandler.logError(error);
    event.preventDefault();
  });

  window.addEventListener('error', (event) => {
    const error = ErrorHandler.createError({
      what: 'Uncaught Error',
      why: event.error?.message || event.message,
      how: 'Check the error stack trace for debugging',
      originalError: event.error,
      context: {
        filename: event.filename,
        lineno: event.lineno,
        colno: event.colno
      }
    });

    ErrorHandler.logError(error);
  });
}

// CommonJS/ES6‰∫íÊèõ„Ç®„ÇØ„Çπ„Éù„Éº„Éà
if (typeof module !== 'undefined' && module.exports) {
  module.exports = { ErrorHandler };
}

export default ErrorHandler;
