name: Code Quality & Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 毎週月曜日午前2時（JST）に依存関係の脆弱性チェック
    - cron: '0 17 * * 1'

jobs:
  # 依存関係とセキュリティの監査
  dependency-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install license-checker
      run: npm install --save-dev license-checker

    - name: Run npm audit
      run: |
        echo "## Dependency Security Audit" >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY
        npm audit --audit-level=moderate || echo "Vulnerabilities found"
        echo "```" >> $GITHUB_STEP_SUMMARY
      continue-on-error: true

    - name: Check outdated packages
      run: |
        echo "## Outdated Dependencies" >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY
        npm outdated || echo "Some packages are outdated"
        echo "```" >> $GITHUB_STEP_SUMMARY
      continue-on-error: true

    - name: Generate dependency report
      run: |
        # package.jsonの依存関係を分析
        echo "## Dependency Analysis" >> dependency-report.md
        echo "**Direct Dependencies:**" >> dependency-report.md
        
        # jqの代わりにnodeを使用
        node -p "Object.keys(require('./package.json').dependencies || {}).length" | xargs -I {} echo "- Production: {} packages" >> dependency-report.md
        node -p "Object.keys(require('./package.json').devDependencies || {}).length" | xargs -I {} echo "- Development: {} packages" >> dependency-report.md
        
        # ライセンス情報の確認
        echo "**License Compliance:**" >> dependency-report.md
        npx license-checker --summary --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC' || echo "- ❌ License violations detected" >> dependency-report.md

    - name: Upload dependency report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-report
        path: dependency-report.md
        retention-days: 30

  # ファイルサイズとバンドル分析
  bundle-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Analyze HTML file size
      run: |
        echo "## Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
        
        # メインHTMLファイルのサイズ分析（ポータブルな方法）
        if [ -f "docs/game.html" ]; then
          html_size=$(wc -c < "docs/game.html")
          echo "- **game.html**: ${html_size} bytes" >> $GITHUB_STEP_SUMMARY
          
          # 1MB以上の場合警告
          if [ $html_size -gt 1048576 ]; then
            echo "⚠️ **Warning**: HTML file is larger than 1MB" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        # JSファイルのサイズ分析
        find docs -name "*.js" -type f 2>/dev/null | while read file; do
          if [ -f "$file" ]; then
            size=$(wc -c < "$file")
            echo "- **$(basename "$file")**: ${size} bytes" >> $GITHUB_STEP_SUMMARY
          fi
        done

    - name: Check for large files
      run: |
        echo "## Large Files Detection" >> $GITHUB_STEP_SUMMARY
        
        # 500KB以上のファイルを検出
        find . -type f -size +500k ! -path "./node_modules/*" ! -path "./.git/*" 2>/dev/null | while read file; do
          size=$(wc -c < "$file")
          echo "⚠️ Large file detected: $file (${size} bytes)" >> $GITHUB_STEP_SUMMARY
        done || echo "No large files found" >> $GITHUB_STEP_SUMMARY

  # コード品質メトリクス
  code-metrics:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python for analysis
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python analysis tools
      run: |
        pip install radon

    - name: Analyze Python code complexity
      run: |
        echo "## Code Complexity Analysis" >> $GITHUB_STEP_SUMMARY
        
        # Pythonファイルの循環複雑度を分析
        if find . -name "*.py" -type f | head -1 | grep -q .; then
          echo "**Python Code Complexity:**" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          find . -name "*.py" -type f ! -path "./venv/*" ! -path "./.env/*" -exec radon cc -s {} \; 2>/dev/null || echo "No Python files found"
          echo "```" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Analyze JavaScript code
      run: |
        # JSファイルの行数とファイル数
        js_files=$(find docs -name "*.js" -type f 2>/dev/null | wc -l || echo "0")
        js_lines=$(find docs -name "*.js" -type f -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
        
        echo "**JavaScript Metrics:**" >> $GITHUB_STEP_SUMMARY
        echo "- Files: $js_files" >> $GITHUB_STEP_SUMMARY
        echo "- Total lines: $js_lines" >> $GITHUB_STEP_SUMMARY

    - name: Check HTML/CSS metrics
      run: |
        # HTMLファイルの分析
        html_files=$(find docs -name "*.html" -type f 2>/dev/null | wc -l || echo "0")
        css_inline=$(grep -r "<style>" docs/ 2>/dev/null | wc -l || echo "0")
        js_inline=$(grep -r "<script>" docs/ 2>/dev/null | wc -l || echo "0")
        
        echo "**Frontend Metrics:**" >> $GITHUB_STEP_SUMMARY
        echo "- HTML files: $html_files" >> $GITHUB_STEP_SUMMARY
        echo "- Inline CSS blocks: $css_inline" >> $GITHUB_STEP_SUMMARY
        echo "- Inline JS blocks: $js_inline" >> $GITHUB_STEP_SUMMARY

  # テストカバレッジ分析
  test-coverage:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright
      run: npx playwright install chromium

    - name: Generate test coverage report
      run: |
        echo "## Test Coverage Analysis" >> $GITHUB_STEP_SUMMARY
        
        # E2Eテスト数の確認
        test_files=$(find tests -name "*.spec.js" -type f 2>/dev/null | wc -l || echo "0")
        total_tests=$(grep -r -E "(test|it)\s*\(" tests/ 2>/dev/null | wc -l || echo "0")
        
        echo "**E2E Test Coverage:**" >> $GITHUB_STEP_SUMMARY
        echo "- Test files: $test_files" >> $GITHUB_STEP_SUMMARY
        echo "- Total test cases: $total_tests" >> $GITHUB_STEP_SUMMARY
        
        # 実装済み機能に対するテストカバレッジの概算
        if [ -f "docs/game.html" ]; then
          # HTMLから機能数を推定（onclick, onkeyなどのイベントハンドラー数）
          event_handlers=$(grep -o "on[a-z]*=" docs/game.html 2>/dev/null | wc -l || echo "0")
          echo "- Estimated interactive features: $event_handlers" >> $GITHUB_STEP_SUMMARY
          
          if [ $total_tests -gt 0 ] && [ $event_handlers -gt 0 ]; then
            coverage_percent=$((total_tests * 100 / event_handlers))
            echo "- **Estimated coverage: ${coverage_percent}%**" >> $GITHUB_STEP_SUMMARY
          fi
        fi

    - name: Test execution time analysis
      run: |
        # テスト実行時間の測定
        start_time=$(date +%s)
        npx playwright test --reporter=json > test-results.json 2>&1 || echo "Tests completed with issues"
        end_time=$(date +%s)
        execution_time=$((end_time - start_time))
        
        echo "**Test Performance:**" >> $GITHUB_STEP_SUMMARY
        echo "- Execution time: ${execution_time} seconds" >> $GITHUB_STEP_SUMMARY
        
        # 平均テスト時間（total_testsは前のステップで定義済み）
        total_tests=$(grep -r -E "(test|it)\s*\(" tests/ 2>/dev/null | wc -l || echo "0")
        if [ -f test-results.json ] && [ $total_tests -gt 0 ]; then
          avg_time=$((execution_time * 1000 / total_tests))
          echo "- Average per test: ${avg_time}ms" >> $GITHUB_STEP_SUMMARY
        fi
      continue-on-error: true

    - name: Upload test metrics
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-metrics
        path: |
          test-results.json
        retention-days: 30